<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" []>

<book id="RTAapi">
 <bookinfo>
  <title>Writing descriptors for Freescale CAAM using RTA library</title>
  <authorgroup>
   <author>
    <firstname>Horia</firstname>
    <surname>Geanta</surname>
    <affiliation>
     <address><email>horia.geanta@freescale.com</email></address>
    </affiliation>
   </author>
  </authorgroup>

  <copyright>
   <year>2008-2014</year>
   <holder>Freescale Semiconductor</holder>
  </copyright>

  <legalnotice>
   <para>
     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions are met:
       <itemizedlist mark='opencircle'>
         <listitem>
	   <para>
	     Redistributions of source code must retain the above copyright
	     notice, this list of conditions and the following disclaimer.
	   </para>
	 </listitem>
	 <listitem>
	   <para>
	     Redistributions in binary form must reproduce the above copyright
	     notice, this list of conditions and the following disclaimer in the
	     documentation and/or other materials provided with the
	     distribution.
	   </para>
         </listitem>
	 <listitem>
	   <para>
	     Neither the name of Freescale Semiconductor nor the names of
	     its contributors may be used to endorse or promote products
	     derived from this software without specific prior written
	     permission.
	   </para>
         </listitem>
       </itemizedlist>
   </para>

   <para>
     ALTERNATIVELY, this software may be distributed under the terms of the GNU
     General Public License ("GPL") as published by the Free Software
     Foundation, either version 2 of that License or (at your option) any later
     version.
   </para>

   <para>
     This software is provided by Freescale Semiconductor "as is" and any
     express or implied warranties, including, but not limited to, the implied
     warranties of merchantability and fitness for a particular purpose are
     disclaimed. In no event shall Freescale Semiconductor be liable for any
     direct, indirect, incidental, special, exemplary, or consequential damages
     (including, but not limited to, procurement of substitute goods or
     services; loss of use, data, or profits; or business interruption) however
     caused and on any theory of liability, whether in contract, strict
     liability, or tort (including negligence or otherwise) arising in any way
     out of the use of this software, even if advised of the possibility of such
     damage.
   </para>
  </legalnotice>
 </bookinfo>

<toc></toc>

  <chapter id="intro">
    <title>Introduction</title>
    <sect1>
      <title>About</title>
!Pdrivers/crypto/caam/flib/rta.h About
!Pdrivers/crypto/caam/flib/rta.h Usage
      <mediaobject>
        <imageobject>
          <imagedata fileref="rta_arch.svg" format="SVG" align="CENTER"/>
        </imageobject>
        <caption><para>RTA Integration Overview</para></caption>
      </mediaobject>
<!-- Next paragraph shall not be delivered in kernel, since we don't provide the
full user manual separately; part of it is embedded in this SGML template.
-->
      <para>
        <xref linkend="userman"/> contains more details about RTA.
      </para>
    </sect1>
    <sect1>
      <title>Using RTA</title>
      <para>
        RTA can be used in an application just by including the following header file:
	#include &quot;flib/rta.h&quot;
      </para>
      <para>
        The files in drivers/crypto/caam/desc directory contain several
	real-world descriptors written with RTA. You can use them as-is or adapt
	them to your needs.
      </para>
      <para>
        RTA routines take as first parameter a pointer to a "struct program"
	variable. It contains housekeeping information that is used during
	descriptor creation.
      </para>
      <para>
        RTA creates the descriptors and saves them in buffers. It is the user's
	job to allocate memory for these buffers before passing them to RTA
	program initialization call.
      </para>
      <para>
        An RTA program must start with a call to PROGRAM_CNTXT_INIT and end with
	PROGRAM_FINALIZE. PROGRAM_CNTXT_INIT will initialize the members of
	'program' structure with user information (pointer to user's buffer, and
	the SEC subversion). The PROGRAM_FINALIZE call checks the descriptor's
	validity.
      </para>
      <para>
        The program length is limited to the size of buffer descriptor which
	can be maximum 64 words (256 bytes). However, a JUMP command can cause
	loading and execution of another Job Descriptor; this allows for much
	larger programs to be created.
      </para>
    </sect1>
    <sect1>
      <title>RTA components</title>
      <para>
        The content of the package is split mainly in two components:
	<itemizedlist mark='opencircle'>
	  <listitem>
	    <para>descriptor builder API (drivers/crypto/caam/flib/rta.h)</para>
	  </listitem>
	  <listitem>
	    <para>
	      ready to use RTA descriptors
	      (drivers/crypto/caam/flib/desc/*.h)
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
        These are the main building blocks of descriptors:
	<itemizedlist mark='opencircle'>
	  <listitem>
	    <para>buffer management: init &amp; finalize</para>
	  </listitem>
	  <listitem>
	    <para>SEC commands: MOVE, LOAD, FIFO_LOAD etc.</para>
	  </listitem>
	  <listitem>
	    <para>descriptor labels (e.g. used as JUMP destinations)</para>
	  </listitem>
	  <listitem>
	    <para>
	      utility commands: (e.g. PATCH_* commands that update labels and
	      references)
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
        In some cases, descriptor fields can't all be set when the commands are
	inserted. These fields must be updated in a similar fashion to what the
	linking process does with a binary file. RTA uses PATCH_* commands to
	get relevant information and PROGRAM_FINALIZE to complete the
	"code relocation".
      </para>
      <para>
        If there is a need for descriptors larger than 64 words, their function
	can be split into several smaller ones. In such case the smaller
	descriptors are correlated and updated using PATCH_*_NON_LOCAL commands.
	These calls must appear after all the descriptors are finalized and not
	before as in a single descriptor case (the reason being that only then
	references to all descriptors are available).
      </para>
    </sect1>
  </chapter>

  <chapter id="apiref">
    <title>RTA API reference</title>
    <sect1>
      <title>Descriptor Buffer Management Routines</title>
!Pdrivers/crypto/caam/flib/rta.h Descriptor Buffer Management Routines
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h rta_sec_era
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h USER_SEC_ERA
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h INTL_SEC_ERA
!Fdrivers/crypto/caam/flib/rta.h PROGRAM_CNTXT_INIT
!Fdrivers/crypto/caam/flib/rta.h PROGRAM_FINALIZE
!Fdrivers/crypto/caam/flib/rta.h PROGRAM_SET_36BIT_ADDR
!Fdrivers/crypto/caam/flib/rta.h PROGRAM_SET_BSWAP
!Fdrivers/crypto/caam/flib/rta.h WORD
!Fdrivers/crypto/caam/flib/rta.h DWORD
!Fdrivers/crypto/caam/flib/rta.h COPY_DATA
!Fdrivers/crypto/caam/flib/rta.h DESC_LEN
!Fdrivers/crypto/caam/flib/rta.h DESC_BYTES
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h program
    </sect1>
    <sect1>
      <title>SEC Commands Routines</title>
!Pdrivers/crypto/caam/flib/rta.h SEC Commands Routines
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h rta_share_type
!Fdrivers/crypto/caam/flib/rta.h SHR_HDR
!Fdrivers/crypto/caam/flib/rta.h JOB_HDR
!Fdrivers/crypto/caam/flib/rta.h JOB_HDR_EXT
!Fdrivers/crypto/caam/flib/rta.h MOVE
!Fdrivers/crypto/caam/flib/rta.h MOVEB
!Fdrivers/crypto/caam/flib/rta.h MOVEDW
!Fdrivers/crypto/caam/flib/rta.h FIFOLOAD
!Fdrivers/crypto/caam/flib/rta.h SEQFIFOLOAD
!Fdrivers/crypto/caam/flib/rta.h FIFOSTORE
!Fdrivers/crypto/caam/flib/rta.h SEQFIFOSTORE
!Fdrivers/crypto/caam/flib/rta.h KEY
!Fdrivers/crypto/caam/flib/rta.h SEQINPTR
!Fdrivers/crypto/caam/flib/rta.h SEQOUTPTR
!Fdrivers/crypto/caam/flib/rta.h ALG_OPERATION
!Fdrivers/crypto/caam/flib/rta.h PROTOCOL
!Fdrivers/crypto/caam/flib/rta.h PKHA_OPERATION
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h rta_jump_cond
!Fdrivers/crypto/caam/flib/rta/sec_run_time_asm.h rta_jump_type
!Fdrivers/crypto/caam/flib/rta.h JUMP
!Fdrivers/crypto/caam/flib/rta.h JUMP_INC
!Fdrivers/crypto/caam/flib/rta.h JUMP_DEC
!Fdrivers/crypto/caam/flib/rta.h LOAD
!Fdrivers/crypto/caam/flib/rta.h SEQLOAD
!Fdrivers/crypto/caam/flib/rta.h STORE
!Fdrivers/crypto/caam/flib/rta.h SEQSTORE
!Fdrivers/crypto/caam/flib/rta.h MATHB
!Fdrivers/crypto/caam/flib/rta.h MATHI
!Fdrivers/crypto/caam/flib/rta.h MATHU
!Fdrivers/crypto/caam/flib/rta.h SIGNATURE
!Fdrivers/crypto/caam/flib/rta.h NFIFOADD
    </sect1>
    <sect1>
      <title>Self Referential Code Management Routines</title>
!Pdrivers/crypto/caam/flib/rta.h Self Referential Code Management Routines
!Fdrivers/crypto/caam/flib/rta.h REFERENCE
!Fdrivers/crypto/caam/flib/rta.h LABEL
!Fdrivers/crypto/caam/flib/rta.h SET_LABEL
!Fdrivers/crypto/caam/flib/rta.h PATCH_JUMP
!Fdrivers/crypto/caam/flib/rta.h PATCH_JUMP_NON_LOCAL
!Fdrivers/crypto/caam/flib/rta.h PATCH_MOVE
!Fdrivers/crypto/caam/flib/rta.h PATCH_MOVE_NON_LOCAL
!Fdrivers/crypto/caam/flib/rta.h PATCH_LOAD
!Fdrivers/crypto/caam/flib/rta.h PATCH_STORE
!Fdrivers/crypto/caam/flib/rta.h PATCH_STORE_NON_LOCAL
!Fdrivers/crypto/caam/flib/rta.h PATCH_RAW
!Fdrivers/crypto/caam/flib/rta.h PATCH_RAW_NON_LOCAL
    </sect1>
  </chapter>

  <chapter id="userman">
    <title>User Manual</title>
    <para>
      User manual is not generated in kernel-doc format.
      It can be found here: sec/rta/doc/user_manual.txt
    </para>
  </chapter>

  <chapter id="descapi">
    <title>RTA descriptors library</title>
    <sect1>
      <title>Shared Descriptor Example Routines</title>
<!-- This shall be empty for kernel, it does not have a shared descriptor library
-->
        <sect2>
	  <title>Algorithms - Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/algo.h Algorithms - Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_snow_f8
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_snow_f9
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_cbc_blkcipher
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_hmac
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_kasumi_f8
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_kasumi_f9
!Fdrivers/crypto/caam/flib/desc/algo.h cnstr_shdsc_crc
        </sect2>
        <sect2>
	  <title>IPsec Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/ipsec.h IPsec Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/ipsec.h cnstr_shdsc_ipsec_encap
!Fdrivers/crypto/caam/flib/desc/ipsec.h cnstr_shdsc_ipsec_decap
!Fdrivers/crypto/caam/flib/desc/ipsec.h cnstr_shdsc_ipsec_encap_des_aes_xcbc
!Fdrivers/crypto/caam/flib/desc/ipsec.h cnstr_shdsc_ipsec_decap_des_aes_xcbc
!Fdrivers/crypto/caam/flib/desc/ipsec.h cnstr_shdsc_ipsec_new_encap
!Fdrivers/crypto/caam/flib/desc/ipsec.h cnstr_shdsc_ipsec_new_decap
        </sect2>
        <sect2>
	  <title>MACsec Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/macsec.h MACsec Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/macsec.h cnstr_shdsc_macsec_encap
!Fdrivers/crypto/caam/flib/desc/macsec.h cnstr_shdsc_macsec_decap
        </sect2>
        <sect2>
	  <title>MBMS Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/mbms.h MBMS Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/mbms.h cnstr_shdsc_mbms
!Fdrivers/crypto/caam/flib/desc/mbms.h get_mbms_stats
        </sect2>
        <sect2>
	  <title>PDCP Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/pdcp.h PDCP Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/pdcp.h cnstr_shdsc_pdcp_c_plane_encap
!Fdrivers/crypto/caam/flib/desc/pdcp.h cnstr_shdsc_pdcp_c_plane_decap
!Fdrivers/crypto/caam/flib/desc/pdcp.h cnstr_shdsc_pdcp_u_plane_encap
!Fdrivers/crypto/caam/flib/desc/pdcp.h cnstr_shdsc_pdcp_u_plane_decap
!Fdrivers/crypto/caam/flib/desc/pdcp.h cnstr_shdsc_pdcp_short_mac
        </sect2>
        <sect2>
	  <title>WCDMA RLC Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/rlc.h WCDMA RLC Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/rlc.h cnstr_shdsc_rlc_encap
!Fdrivers/crypto/caam/flib/desc/rlc.h cnstr_shdsc_rlc_decap
        </sect2>
        <sect2>
	  <title>RSA Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/rsa.h RSA Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/rsa.h cnstr_shdsc_rsa
        </sect2>
        <sect2>
	  <title>SRTP Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/srtp.h SRTP Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/srtp.h cnstr_shdsc_srtp_encap
!Fdrivers/crypto/caam/flib/desc/srtp.h cnstr_shdsc_srtp_decap
        </sect2>
        <sect2>
	  <title>SSL/TLS/DTLS Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/tls.h SSL/TLS/DTLS Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/tls.h cnstr_shdsc_tls
!Fdrivers/crypto/caam/flib/desc/tls.h cnstr_shdsc_tls10_enc
!Fdrivers/crypto/caam/flib/desc/tls.h cnstr_shdsc_tls10_dec
        </sect2>
        <sect2>
	  <title>WiFi Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/wifi.h WiFi Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/wifi.h cnstr_shdsc_wifi_encap
!Fdrivers/crypto/caam/flib/desc/wifi.h cnstr_shdsc_wifi_decap
        </sect2>
        <sect2>
	  <title>WiMAX Shared Descriptor Constructors</title>
!Pdrivers/crypto/caam/flib/desc/wimax.h WiMAX Shared Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/wimax.h cnstr_shdsc_wimax_encap
!Fdrivers/crypto/caam/flib/desc/wimax.h cnstr_shdsc_wimax_decap
        </sect2>
    </sect1>
    <sect1>
      <title>SEC Protocol Data Block (PDB) Data Structures</title>
<!-- This shall be empty for kernel, it does not have a shared descriptor library
-->
      <sect2>
        <title>IPsec PDBs</title>
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_encap_cbc
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_decap_cbc
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_encap_ctr
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_decap_ctr
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_encap_ccm
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_decap_ccm
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_encap_gcm
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_decap_gcm
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_encap_pdb
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_decap_pdb
      </sect2>
      <sect2>
        <title>MBMS PDBs</title>
!Fdrivers/crypto/caam/flib/desc/mbms.h mbms_type_0_pdb
!Fdrivers/crypto/caam/flib/desc/mbms.h mbms_type_1_3_pdb
      </sect2>
      <sect2>
        <title>RSA PDBs</title>
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_encrypt_pdb_64b
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_encrypt_pdb
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_dec_pdb_form1_64b
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_dec_pdb_form1
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_dec_pdb_form2_64b
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_dec_pdb_form2
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_dec_pdb_form3_64b
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_dec_pdb_form3
      </sect2>
      <sect2>
        <title>TLS PDBs</title>
!Fdrivers/crypto/caam/flib/desc/tls.h tls_block_enc
!Fdrivers/crypto/caam/flib/desc/tls.h tls_block_dec
!Fdrivers/crypto/caam/flib/desc/tls.h dtls_block_enc
!Fdrivers/crypto/caam/flib/desc/tls.h dtls_block_dec
!Fdrivers/crypto/caam/flib/desc/tls.h tls_block_pdb
!Fdrivers/crypto/caam/flib/desc/tls.h tls_stream_enc
!Fdrivers/crypto/caam/flib/desc/tls.h tls_stream_dec
!Fdrivers/crypto/caam/flib/desc/tls.h tls_stream_pdb
!Fdrivers/crypto/caam/flib/desc/tls.h tls_ctr_enc
!Fdrivers/crypto/caam/flib/desc/tls.h tls_ctr
!Fdrivers/crypto/caam/flib/desc/tls.h tls_ctr_pdb
!Fdrivers/crypto/caam/flib/desc/tls.h tls12_gcm_encap
!Fdrivers/crypto/caam/flib/desc/tls.h tls12_gcm_decap
!Fdrivers/crypto/caam/flib/desc/tls.h dtls_gcm
!Fdrivers/crypto/caam/flib/desc/tls.h tls_gcm_pdb
!Fdrivers/crypto/caam/flib/desc/tls.h tls12_ccm_encap
!Fdrivers/crypto/caam/flib/desc/tls.h tls_ccm
!Fdrivers/crypto/caam/flib/desc/tls.h tls_ccm_pdb
      </sect2>
    </sect1>
    <sect1>
      <title>Job Descriptor Example Routines</title>
!Pdrivers/crypto/caam/flib/desc/jobdesc.h Job Descriptor Constructors
!Fdrivers/crypto/caam/flib/desc/jobdesc.h cnstr_jobdesc_mdsplitkey
    </sect1>
    <sect1>
      <title>Auxiliary Data Structures</title>
!Pdrivers/crypto/caam/flib/desc/common.h Shared Descriptor Constructors - shared structures
!Fdrivers/crypto/caam/flib/desc/common.h alginfo
!Fdrivers/crypto/caam/flib/desc/common.h protcmd
!Fdrivers/crypto/caam/flib/desc/ipsec.h ipsec_icv_size
!Fdrivers/crypto/caam/flib/desc/macsec.h cipher_type_macsec
!Fdrivers/crypto/caam/flib/desc/mbms.h mbms_pdu_type
!Fdrivers/crypto/caam/flib/desc/pdcp.h cipher_type_pdcp
!Fdrivers/crypto/caam/flib/desc/pdcp.h auth_type_pdcp
!Fdrivers/crypto/caam/flib/desc/pdcp.h pdcp_dir
!Fdrivers/crypto/caam/flib/desc/pdcp.h pdcp_plane
!Fdrivers/crypto/caam/flib/desc/pdcp.h pdcp_sn_size
!Fdrivers/crypto/caam/flib/desc/rlc.h rlc_mode
!Fdrivers/crypto/caam/flib/desc/rlc.h rlc_dir
!Fdrivers/crypto/caam/flib/desc/rlc.h cipher_type_rlc
!Fdrivers/crypto/caam/flib/desc/rsa.h rsa_decrypt_form
    </sect1>
    <sect1>
      <title>Auxiliary Defines</title>
<!-- This shall be empty for kernel, it does not have a shared descriptor library
-->
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_ESN
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_IPVSN
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_TUNNEL
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_UPDATE_CSUM
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_DIFFSERV
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_IVSRC
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_IPHDRSRC
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_INCIPHDR
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_OIHI_MASK
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_OIHI_PDB_INL
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_OIHI_PDB_REF
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_OIHI_IF
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_NAT
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_NUC
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_ARSNONE
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_ARS64
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_ARS128
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_ARS32
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_VERIFY_CSUM
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_TECN
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_OUTFMT
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_AOFL
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBOPTS_ESP_ETU
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_ENCAP_DTTL
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_DECAP_DTTL
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_DIFFSERV
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_SNR
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_DFBIT
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_DFV
!Fdrivers/crypto/caam/flib/desc/ipsec.h PDBHMO_ESP_ODF
!Fdrivers/crypto/caam/flib/desc/mbms.h MBMS_CRC_HDR_FAIL
!Fdrivers/crypto/caam/flib/desc/mbms.h MBMS_CRC_PAYLOAD_FAIL
!Fdrivers/crypto/caam/flib/desc/pdcp.h PDCP_MAX_FRAME_LEN_STATUS
!Fdrivers/crypto/caam/flib/desc/pdcp.h PDCP_NULL_INT_ICV_CHECK_FAILED_STATUS
!Fdrivers/crypto/caam/flib/desc/pdcp.h PDCP_DPOVRD_HFN_OV_EN
!Fdrivers/crypto/caam/flib/desc/pdcp.h PDCP_P4080REV2_HFN_OV_BUFLEN
!Fdrivers/crypto/caam/flib/desc/wimax.h WIMAX_ICV_LEN
!Fdrivers/crypto/caam/flib/desc/wimax.h WIMAX_FCS_LEN
!Fdrivers/crypto/caam/flib/desc/wimax.h WIMAX_PN_LEN
!Fdrivers/crypto/caam/flib/desc/wimax.h WIMAX_PDBOPTS_FCS
!Fdrivers/crypto/caam/flib/desc/wimax.h WIMAX_PDBOPTS_AR
    </sect1>
  </chapter>
</book>
